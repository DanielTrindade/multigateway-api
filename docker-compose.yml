services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: multigateway-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - multigateway-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    command: --default-authentication-plugin=mysql_native_password

  # Test Database
  db_test:
    image: mysql:8.0
    container_name: multigateway-db-test
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: "multigateway_test"
      MYSQL_USER: "multigateway_test"
      MYSQL_PASSWORD: "test_password"
      MYSQL_ROOT_PASSWORD: "root_password"
    ports:
      - "3307:3306"
    volumes:
      - mysql_test_data:/var/lib/mysql
      - ./docker/mysql/test-conf.d:/etc/mysql/conf.d
    networks:
      - multigateway-network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --explicit_defaults_for_timestamp=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Laravel Application
  app:
    build:
      context: ./multigateway-app
      dockerfile: ../Dockerfile.app
    container_name: multigateway-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./multigateway-app:/var/www/html
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - multigateway-network
    env_file:
      - .env

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: multigateway-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./multigateway-app:/var/www/html
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - app
    networks:
      - multigateway-network

  # Redis for caching (opcional)
  redis:
    image: redis:alpine
    container_name: multigateway-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - multigateway-network
    volumes:
      - redis_data:/data

  # Gateway 1 Mock
  gateway1:
    image: matheusprotzen/gateways-mock
    container_name: multigateway-gateway1
    restart: unless-stopped
    ports:
      - "3001:3001"
    networks:
      - multigateway-network

  # Gateway 2 Mock
  gateway2:
    image: matheusprotzen/gateways-mock
    container_name: multigateway-gateway2
    restart: unless-stopped
    ports:
      - "3002:3002"
    networks:
      - multigateway-network

# Networks
networks:
  multigateway-network:
    driver: bridge

# Volumes
volumes:
  mysql_data:
    driver: local
  mysql_test_data:
    driver: local
  redis_data:
    driver: local
